var file = require('file'),
    techs = require('./bembuild/techs').Techs,
    parser = exports.parser = (new (require('args').Parser)())
        .option('-d', '--decl', 'declaration')
            .help('имя файла декларации использования, обязательный параметр')
            .set()
            .end()
        .option('-l', '--level', 'level')
            .help('уровень переопределения, может использоваться несколько раз')
            .push()
            .end()
        .option('-t', '--tech', 'tech')
            .help('создавать файлы заданной технологии, может использоваться несколько раз')
            .choices(techs)
            .push()
            .end()
        .option('-o', '--output-dir', 'outputDir')
            .help('директория для записи результата, по умолчанию текущая')
            .def(system.getcwd())
            .set()
            .end()
        .option('-n', '--output-name', 'outputName')
            .help('имя для записи результата')
            .set()
            .end()
        .helpful();

exports.main = function () {
    var options = parser.parse(system.args);

    if (!options.declaration) {
        parser.print('Пропущен обязательный параметр декларации использования')
        parser.exit(1);
    }

    // для каждой технологии
        // для каждого блока в декларации
            // для каждого модификатора в блоке
                // для самого модификатора
                    // для каждого уровня переопределения
                        // получить имя файла технологии для модификатора блока
                        // записать имя файла в контейнер файлов технологии
                // для каждого значения модификатора
                    // для каждого уровня переопределения
                        // получить имя файла технологии для значения модификатора блока
                        // записать имя файла в контейнер файлов технологии
            // для каждого элемента в блоке
                // для каждого уровня переопределения
                    // получить имя файла технологии для элемента блока
                    // записать имя файла в контейнер файлов технологии
                // для каждого модификатора в элементе
                    // для самого модификатора
                        // для каждого уровня переопределения
                            // получить имя файла технологии для модификатора элемента
                            // записать имя файла в контейнер файлов технологии
                    // для каждого значения модификатора
                        // для каждого уровня переопределения
                            // получить имя файла технологии для значения модификатора элемента
                            // записать имя файла в контейнер файлов технологии
        // сериализовать контейнер файлов технологии согласно параметрам вывода

};
